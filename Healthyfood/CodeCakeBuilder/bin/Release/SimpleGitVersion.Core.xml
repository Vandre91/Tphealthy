<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SimpleGitVersion.Core</name>
    </assembly>
    <members>
        <member name="T:SimpleGitVersion.EmptyLogger">
            <summary>
            Empty object pattern.
            </summary>
        </member>
        <member name="F:SimpleGitVersion.EmptyLogger.Empty">
            <summary>
            The empty logger to use.
            </summary>
        </member>
        <member name="T:SimpleGitVersion.GitExtensions">
            <summary>
            Git objects related extensions methods.
            </summary>
        </member>
        <member name="M:SimpleGitVersion.GitExtensions.ResolveTarget(LibGit2Sharp.Tag)">
            <summary>
            Follows the targets of a Git <see cref="T:LibGit2Sharp.Tag"/>.
            </summary>
            <param name="tag">Starting tag.</param>
            <returns>The tagged object.</returns>
        </member>
        <member name="T:SimpleGitVersion.ILogger">
            <summary>
            Simple logger abstraction.
            </summary>
        </member>
        <member name="M:SimpleGitVersion.ILogger.Error(System.String)">
            <summary>
            Logs an error.
            </summary>
            <param name="msg">Error message.</param>
        </member>
        <member name="M:SimpleGitVersion.ILogger.Warn(System.String)">
            <summary>
            logs a warning.
            </summary>
            <param name="msg">Warning message.</param>
        </member>
        <member name="M:SimpleGitVersion.ILogger.Info(System.String)">
            <summary>
            Logs an informational message.
            </summary>
            <param name="msg">Information message.</param>
        </member>
        <member name="M:SimpleGitVersion.ILogger.Trace(System.String)">
            <summary>
            Logs a trace.
            </summary>
            <param name="msg">Trace message.</param>
        </member>
        <member name="T:SimpleGitVersion.PathComparer">
            <summary>
            Simple path comparer.
            Just use the <see cref="F:SimpleGitVersion.PathComparer.Default"/> instance.
            </summary>
        </member>
        <member name="F:SimpleGitVersion.PathComparer.Default">
            <summary>
            Gets the default instance to use.
            </summary>
        </member>
        <member name="T:SimpleGitVersion.CIReleaseInfo">
            <summary>
            Encapsulates CI release information.
            Instances of this class are created internally if and only a CI build can 
            actually be done.
            </summary>
        </member>
        <member name="F:SimpleGitVersion.CIReleaseInfo.BaseTag">
            <summary>
            The base <see cref="T:CSemVer.CSVersion"/> from which <see cref="F:SimpleGitVersion.CIReleaseInfo.BuildVersion"/> is built.
            It is either the the previous release or the <see cref="F:CSemVer.CSVersion.VeryFirstVersion"/>.
            </summary>
        </member>
        <member name="F:SimpleGitVersion.CIReleaseInfo.Depth">
            <summary>
            The greatest number of commits between the current commit and the deepest occurence 
            of <see cref="F:SimpleGitVersion.CIReleaseInfo.BaseTag"/>.
            </summary>
        </member>
        <member name="F:SimpleGitVersion.CIReleaseInfo.BuildVersion">
            <summary>
            Never null: this is the CSemVer-CI version in <see cref="F:CSemVer.CSVersionFormat.SemVer"/> format.
            </summary>
        </member>
        <member name="F:SimpleGitVersion.CIReleaseInfo.BuildVersionNuGet">
            <summary>
            Never null: this is the CSemVer-CI version in <see cref="F:CSemVer.CSVersionFormat.NuGetPackage"/> format.
            </summary>
        </member>
        <member name="M:SimpleGitVersion.CIReleaseInfo.CreateNuGetZeroTimed(System.String,System.DateTime)">
            <summary>
            Creates the ZeroTimed NuGetV2 version string.
            </summary>
            <param name="ciBuildName">The BuildName string (typically "develop").</param>
            <param name="timeRelease">The utc date time of the release.</param>
            <returns>A NuGetV2 O.O.O-C version string.</returns>
        </member>
        <member name="M:SimpleGitVersion.CIReleaseInfo.CreateSemVerZeroTimed(System.String,System.DateTime,System.String)">
            <summary>
            Creates the ZeroTimed SemVer version string. The <paramref name="actualBaseTag"/>, if not null, is appended 
            as a suffix (Build metadata).
            </summary>
            <param name="ciBuildName">The BuildName string (typically "develop").</param>
            <param name="timeRelease">The utc date time of the release.</param>
            <param name="actualBaseTag">An optional base release that will be added as build metadata.</param>
            <returns>A SemVer O.O.O--ci version string.</returns>
        </member>
        <member name="T:SimpleGitVersion.CIBranchVersionMode">
            <summary>
            Defines the way the current commit on a branch is considered.
            </summary>
        </member>
        <member name="F:SimpleGitVersion.CIBranchVersionMode.None">
            <summary>
            The branch does not generate any version information.
            </summary>
        </member>
        <member name="F:SimpleGitVersion.CIBranchVersionMode.ZeroTimed">
            <summary>
            The version will be a 0.0.0--ci-BranchName-SortableUtcDateTime+PreviousReleaseVersion.
            </summary>
        </member>
        <member name="F:SimpleGitVersion.CIBranchVersionMode.LastReleaseBased">
            <summary>
            The version will be based on the PreviousRelease.
            </summary>
        </member>
        <member name="T:SimpleGitVersion.IWorkingFolderModifiedFile">
            <summary>
            Describes a file that is modified compared to the committed version.
            </summary>
        </member>
        <member name="P:SimpleGitVersion.IWorkingFolderModifiedFile.RepositoryFullPath">
            <summary>
            Gets the full path of repository root (the folder that contains the .git folder).
            This ends with <see cref="F:System.IO.Path.DirectorySeparatorChar"/>.
            </summary>
            <value>The repository full path.</value>
        </member>
        <member name="P:SimpleGitVersion.IWorkingFolderModifiedFile.Path">
            <summary>
            Gets the local path of the modified file, relative to the <see cref="P:SimpleGitVersion.IWorkingFolderModifiedFile.RepositoryFullPath"/>.
            </summary>
            <value>The modified file path.</value>
        </member>
        <member name="P:SimpleGitVersion.IWorkingFolderModifiedFile.FullPath">
            <summary>
            Gets the full path of the modified file.
            </summary>
            <value>The modified file full path.</value>
        </member>
        <member name="P:SimpleGitVersion.IWorkingFolderModifiedFile.CommittedContentSize">
            <summary>
            Gets the size of the committed content. 
            </summary>
            <value>The size of the committed content.</value>
        </member>
        <member name="M:SimpleGitVersion.IWorkingFolderModifiedFile.GetCommittedContent">
            <summary>
            Gets the content of the committed file. 
            The stream should be disposed.
            </summary>
            <returns>An opened Stream.</returns>
        </member>
        <member name="P:SimpleGitVersion.IWorkingFolderModifiedFile.CommittedText">
            <summary>
            Gets the content of the committed file.
            </summary>
            <value>The committed file content.</value>
        </member>
        <member name="T:SimpleGitVersion.PossibleVersionsMode">
            <summary>
            Defines which set of possible versions must be used to consider a version tag as a valid one.
            Default is 'Restricted': Restricted mode prevents a non-patch version to be produced whenever
            a greater version exists in the repository. 'AllSuccessors' mode considers all valid successors: this can be used
            on "Long Term Support" branches since this allows a 4.3.0 to be released even if a 5.0.0 version exists. 
            </summary>
        </member>
        <member name="F:SimpleGitVersion.PossibleVersionsMode.Default">
            <summary>
            Defaults to <see cref="F:SimpleGitVersion.PossibleVersionsMode.Restricted"/>.
            </summary>
        </member>
        <member name="F:SimpleGitVersion.PossibleVersionsMode.AllSuccessors">
            <summary>
            All possible versions are allowed.
            This is the default that allows the release of a non-patch version (ie. 2.1.0) even
            when a greater version exists in the repository (ie. 3.0.0).
            </summary>
        </member>
        <member name="F:SimpleGitVersion.PossibleVersionsMode.Restricted">
            <summary>
            Restricted mode prevents a non-patch version to be produced whenever
            a greater version exists in the repository.
            </summary>
        </member>
        <member name="T:SimpleGitVersion.RepositoryInfoOptions">
            <summary>
            Describes options for initializing <see cref="T:SimpleGitVersion.RepositoryInfo"/>.
            </summary>
        </member>
        <member name="M:SimpleGitVersion.RepositoryInfoOptions.#ctor">
            <summary>
            Initializes a new <see cref="T:SimpleGitVersion.RepositoryInfoOptions"/>.
            </summary>
        </member>
        <member name="P:SimpleGitVersion.RepositoryInfoOptions.StartingCommitSha">
            <summary>
            Gets or sets the commit that will be analyzed.
            When null (the default) or empty, the <see cref="P:SimpleGitVersion.RepositoryInfoOptions.StartingBranchName"/> is used.
            This property must be used programmatically: it does not appear in the Xml file.
            </summary>
        </member>
        <member name="P:SimpleGitVersion.RepositoryInfoOptions.StartingBranchName">
            <summary>
            Gets or sets the branch whose name will be analyzed. Applies only when <see cref="P:SimpleGitVersion.RepositoryInfoOptions.StartingCommitSha"/> is null or empty.
            When null (the default) or empty, the current head is used.
            This property must be used programmatically: it does not appear in the Xml file.
            </summary>
        </member>
        <member name="P:SimpleGitVersion.RepositoryInfoOptions.OverriddenTags">
            <summary>
            Gets or sets an enumerable of commits' sha with tags. Defaults to null.
            All commit sha MUST exist in the repository otherwise an error will be added to the error collector.
            If the key is "head" (instead of a SHA1) the tags are applied on the current head of the repository.
            These tags are applied as if they exist in the repository.
            This property must be used programmatically: it does not appear in the Xml file.
            </summary>
            <remarks>
            A dictionary of string to list of sting can be directly assigned to this property.
            </remarks>
        </member>
        <member name="P:SimpleGitVersion.RepositoryInfoOptions.StartingVersionForCSemVer">
            <summary>
            Gets or sets a version from which CSemVer rules are enforced.
            When set, any version before this one are silently ignored.
            This is useful to accommodate an existing repository that did not use Simple Git Versioning by easily forgetting the past.
            </summary>
        </member>
        <member name="P:SimpleGitVersion.RepositoryInfoOptions.PossibleVersionsMode">
            <summary>
            Gets or sets the set of possible versions that must be used to consider a version tag as a valid one.
            </summary>
        </member>
        <member name="P:SimpleGitVersion.RepositoryInfoOptions.Branches">
            <summary>
            Gets or sets branches informations.
            </summary>
        </member>
        <member name="P:SimpleGitVersion.RepositoryInfoOptions.IgnoreModifiedFiles">
            <summary>
            Gets a set of paths for which local modifications are ignored.
            It is empty by default.
            </summary>
        </member>
        <member name="P:SimpleGitVersion.RepositoryInfoOptions.IgnoreModifiedFilePredicate">
            <summary>
            Gets or sets a filter for modified file: when null, all <see cref="T:SimpleGitVersion.IWorkingFolderModifiedFile"/>
            are considered modified (as if this predicate always evaluates to false).
            This hook is called only if the file does not appear in <see cref="P:SimpleGitVersion.RepositoryInfoOptions.IgnoreModifiedFiles"/>.
            </summary>
            <value>The file filter.</value>
        </member>
        <member name="P:SimpleGitVersion.RepositoryInfoOptions.IgnoreModifiedFileFullProcess">
            <summary>
            Gets or sets whether all modified files must be processed: when false (the default), as soon as a modified file 
            is not in the <see cref="P:SimpleGitVersion.RepositoryInfoOptions.IgnoreModifiedFiles"/> and <see cref="P:SimpleGitVersion.RepositoryInfoOptions.IgnoreModifiedFilePredicate"/> returned 
            false, the process stops.
            </summary>
        </member>
        <member name="P:SimpleGitVersion.RepositoryInfoOptions.RemoteName">
            <summary>
            Gets or sets the name of the remote repository that will be considered when
            working with branches. Defaults to "origin" (can never be null or empty).
            </summary>
        </member>
        <member name="P:SimpleGitVersion.RepositoryInfoOptions.IgnoreDirtyWorkingFolder">
            <summary>
            Gets or sets whether the <see cref="P:SimpleGitVersion.RepositoryInfo.IsDirty"/> is ignored.
            This should be used only for debugging purposes.
            </summary>
        </member>
        <member name="M:SimpleGitVersion.RepositoryInfoOptions.Read(System.String)">
            <summary>
            Reads <see cref="T:SimpleGitVersion.RepositoryInfoOptions"/> from a xml file.
            </summary>
            <param name="existingFilePath">Path to a xml file.</param>
            <returns>Returns a configured <see cref="T:SimpleGitVersion.RepositoryInfoOptions"/>.</returns>
        </member>
        <member name="M:SimpleGitVersion.RepositoryInfoOptions.ToXml">
            <summary>
            Gets this options as an Xml element.
            </summary>
            <returns>The XElement.</returns>
        </member>
        <member name="M:SimpleGitVersion.RepositoryInfoOptions.Read(System.Xml.Linq.XElement)">
            <summary>
            Reads <see cref="T:SimpleGitVersion.RepositoryInfoOptions"/> from a xml element.
            </summary>
            <param name="e">Xml element.</param>
            <returns>Returns a configured <see cref="T:SimpleGitVersion.RepositoryInfoOptions"/>.</returns>
        </member>
        <member name="T:SimpleGitVersion.RepositoryInfoOptionsBranch">
            <summary>
            Describes options related to a Git branch.
            </summary>
        </member>
        <member name="M:SimpleGitVersion.RepositoryInfoOptionsBranch.#ctor">
            <summary>
            Initializes a new default <see cref="T:SimpleGitVersion.RepositoryInfoOptionsBranch"/> object.
            </summary>
        </member>
        <member name="M:SimpleGitVersion.RepositoryInfoOptionsBranch.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new branch information from a <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
            <param name="e">The xml element.</param>
        </member>
        <member name="M:SimpleGitVersion.RepositoryInfoOptionsBranch.ToXml">
            <summary>
            Gets this branch as an Xml element.
            </summary>
            <returns>The XElement.</returns>
        </member>
        <member name="P:SimpleGitVersion.RepositoryInfoOptionsBranch.Name">
            <summary>
            Gets or sets the name of the branch.
            </summary>
        </member>
        <member name="P:SimpleGitVersion.RepositoryInfoOptionsBranch.VersionName">
            <summary>
            Gets or sets an optional name that will be used instead of <see cref="P:SimpleGitVersion.RepositoryInfoOptionsBranch.Name"/> in the version.
            </summary>
        </member>
        <member name="P:SimpleGitVersion.RepositoryInfoOptionsBranch.CIVersionMode">
            <summary>
            Gets or sets the wanted behavior for this branch.
            </summary>
        </member>
        <member name="T:SimpleGitVersion.ReleaseTagParsingMode">
            <summary>
            Describes how a tag on a commit point must be parsed. 
            </summary>
        </member>
        <member name="F:SimpleGitVersion.ReleaseTagParsingMode.IgnoreMalformedTag">
            <summary>
            The tag is analysed without any attempt to detect whether it is malformed: it must be valid otherwise it is silently ignored.
            </summary>
        </member>
        <member name="F:SimpleGitVersion.ReleaseTagParsingMode.RaiseErrorOnMalformedTag">
            <summary>
            If the tag is malformed (<see cref="P:CSemVer.CSVersion.IsValidSyntax"/> is false and <see cref="P:CSemVer.CSVersion.IsMalformed"/> is true), an error is raised.
            </summary>
        </member>
        <member name="F:SimpleGitVersion.ReleaseTagParsingMode.RaiseErrorOnMalformedTagAndNonStandardPreReleaseName">
            <summary>
            Same as <see cref="F:SimpleGitVersion.ReleaseTagParsingMode.RaiseErrorOnMalformedTag"/> with the addition that <see cref="P:CSemVer.CSVersion.IsPreReleaseNameStandard"/> must be true.
            </summary>
        </member>
        <member name="T:SimpleGitVersion.RepositoryInfo">
            <summary>
            Immutable object that can be obtained by calling <see cref="M:SimpleGitVersion.RepositoryInfo.LoadFromPath(System.String,SimpleGitVersion.RepositoryInfoOptions)"/> 
            that describes the commit and all the CSemVer information.
            </summary>
        </member>
        <member name="F:SimpleGitVersion.RepositoryInfo.GitSolutionDirectory">
            <summary>
            Gets the solution directory: the one that contains the .git folder.
            Null only if <see cref="F:SimpleGitVersion.RepositoryInfo.RepositoryError"/> is 'No Git repository.'.
            It ends with the <see cref="F:System.IO.Path.DirectorySeparatorChar"/>.
            </summary>
        </member>
        <member name="F:SimpleGitVersion.RepositoryInfo.RepositoryError">
            <summary>
            Gets the repository level error if any: it is one line of text or null ('No Git repository.' or 'Unitialized Git repository.').
            </summary>
        </member>
        <member name="F:SimpleGitVersion.RepositoryInfo.ReleaseTagErrorLines">
            <summary>
            Gets the errors related to the release tags as a list of lines.
            Null if no errors.
            </summary>
        </member>
        <member name="F:SimpleGitVersion.RepositoryInfo.ReleaseTagErrorText">
            <summary>
            Gets the errors related to the release tags as a text.
            Null if no errors.
            </summary>
        </member>
        <member name="P:SimpleGitVersion.RepositoryInfo.ErrorHeaderText">
            <summary>
            Gets a one line error text if <see cref="P:SimpleGitVersion.RepositoryInfo.HasError"/> is true. Null otherwise.
            </summary>
        </member>
        <member name="P:SimpleGitVersion.RepositoryInfo.HasError">
            <summary>
            Gets a one line error text if <see cref="P:SimpleGitVersion.RepositoryInfo.HasError"/> is true. Null otherwise.
            </summary>
        </member>
        <member name="P:SimpleGitVersion.RepositoryInfo.IsDirty">
            <summary>
            Gets whether there are non committed files in the working directory.
            </summary>
        </member>
        <member name="F:SimpleGitVersion.RepositoryInfo.IsDirtyExplanations">
            <summary>
            Gets detailed explanations about <see cref="P:SimpleGitVersion.RepositoryInfo.IsDirty"/>.
            </summary>
        </member>
        <member name="F:SimpleGitVersion.RepositoryInfo.ValidReleaseTag">
            <summary>
            Gets the release tag. If there is error, this is null.
            It is also null if there is actually no release tag on the current commit.
            </summary>
        </member>
        <member name="F:SimpleGitVersion.RepositoryInfo.ReleaseTagIsNotPossibleError">
            <summary>
            Gets whether the error is the fact that the release tag on the current commit point
            is not one of the <see cref="F:SimpleGitVersion.RepositoryInfo.PossibleVersions"/>. An error that describes this appears 
            in <see cref="F:SimpleGitVersion.RepositoryInfo.ReleaseTagErrorLines"/> and <see cref="F:SimpleGitVersion.RepositoryInfo.ReleaseTagErrorText"/>
            </summary>
        </member>
        <member name="F:SimpleGitVersion.RepositoryInfo.PreviousRelease">
            <summary>
            Null if there is a <see cref="F:SimpleGitVersion.RepositoryInfo.RepositoryError"/> or a <see cref="F:SimpleGitVersion.RepositoryInfo.ReleaseTagErrorText"/> that 
            prevented its computation.
            Can also be null if there is simply no previous release.
            </summary>
        </member>
        <member name="F:SimpleGitVersion.RepositoryInfo.PreviousMaxRelease">
            <summary>
            Null if there is a <see cref="F:SimpleGitVersion.RepositoryInfo.RepositoryError"/> or a <see cref="F:SimpleGitVersion.RepositoryInfo.ReleaseTagErrorText"/> that 
            prevented its computation.
            Can also be null if there is simply no previous release: the <see cref="F:SimpleGitVersion.RepositoryInfo.PossibleVersions"/> are then based on <see cref="F:CSemVer.CSVersion.FirstPossibleVersions"/>.
            </summary>
        </member>
        <member name="F:SimpleGitVersion.RepositoryInfo.ExistingVersions">
            <summary>
            Gets the existing versions in the repository in ascending order.
            Null if there is a <see cref="F:SimpleGitVersion.RepositoryInfo.RepositoryError"/> or a <see cref="F:SimpleGitVersion.RepositoryInfo.ReleaseTagErrorText"/> that 
            prevented its computation.
            </summary>
        </member>
        <member name="F:SimpleGitVersion.RepositoryInfo.PossibleVersions">
            <summary>
            Null if there is a <see cref="F:SimpleGitVersion.RepositoryInfo.RepositoryError"/> or a <see cref="F:SimpleGitVersion.RepositoryInfo.ReleaseTagErrorText"/> that 
            prevented its computation.
            When empty, this means that there can not be a valid release tag on the current commit point.
            </summary>
        </member>
        <member name="F:SimpleGitVersion.RepositoryInfo.PossibleVersionsStrict">
            <summary>
            Gets the possible versions on this commit in a strict sense: this is a subset 
            of the <see cref="F:SimpleGitVersion.RepositoryInfo.PossibleVersions"/>.
            A possible versions that is not a <see cref="P:CSemVer.CSVersion.IsPatch"/> do not appear here 
            if a greater version exists in the repository.
            Null if there is a <see cref="F:SimpleGitVersion.RepositoryInfo.RepositoryError"/> or a <see cref="F:SimpleGitVersion.RepositoryInfo.ReleaseTagErrorText"/> that 
            prevented its computation.
            </summary>
        </member>
        <member name="F:SimpleGitVersion.RepositoryInfo.CIRelease">
            <summary>
            Gets CI informations if a CI release must be done.
            Not null only if we are on a branch that is enabled in <see cref="P:SimpleGitVersion.RepositoryInfoOptions.Branches"/> (either 
            because it is the current branch or <see cref="P:SimpleGitVersion.RepositoryInfoOptions.StartingBranchName"/> specifies it), the <see cref="P:SimpleGitVersion.RepositoryInfoOptions.StartingCommitSha"/> 
            is null or empty and there is no <see cref="F:SimpleGitVersion.RepositoryInfo.ValidReleaseTag"/> on the commit.
            </summary>
        </member>
        <member name="F:SimpleGitVersion.RepositoryInfo.FinalNuGetVersion">
            <summary>
            Gets the NuGet version that must be used.
            Never null: defaults to <see cref="F:CSemVer.SVersion.ZeroVersion"/>.
            </summary>
        </member>
        <member name="F:SimpleGitVersion.RepositoryInfo.FinalSemVersion">
            <summary>
            Gets the semantic version that must be used.
            Never null: defaults to <see cref="F:CSemVer.SVersion.ZeroVersion"/>.
            </summary>
        </member>
        <member name="F:SimpleGitVersion.RepositoryInfo.FinalInformationalVersion">
            <summary>
            Gets the standardized information version string.
            Never null: defaults to <see cref="F:CSemVer.InformationalVersion.ZeroInformationalVersion"/> string.
            </summary>
        </member>
        <member name="F:SimpleGitVersion.RepositoryInfo.Options">
            <summary>
            Gets the <see cref="T:SimpleGitVersion.RepositoryInfoOptions"/> that has been used.
            </summary>
        </member>
        <member name="F:SimpleGitVersion.RepositoryInfo.CommitDateUtc">
            <summary>
            The UTC date and time of the commit.
            </summary>
        </member>
        <member name="F:SimpleGitVersion.RepositoryInfo.CommitSha">
            <summary>
            The Sha of the commit.
            </summary>
        </member>
        <member name="F:SimpleGitVersion.RepositoryInfo.CurrentUserName">
            <summary>
            The current user name.
            </summary>
        </member>
        <member name="M:SimpleGitVersion.RepositoryInfo.LoadFromPath(System.String,SimpleGitVersion.RepositoryInfoOptions)">
            <summary>
            Creates a new <see cref="T:SimpleGitVersion.RepositoryInfo"/> based on a path (that can be below the folder with the '.git' sub folder). 
            </summary>
            <param name="path">The path to lookup.</param>
            <param name="options">Optional <see cref="T:SimpleGitVersion.RepositoryInfoOptions"/>.</param>
            <returns>An immutable RepositoryInfo instance. Never null.</returns>
        </member>
        <member name="M:SimpleGitVersion.RepositoryInfo.LoadFromPath(System.String,System.Func{System.String,SimpleGitVersion.RepositoryInfoOptions})">
            <summary>
            Creates a new <see cref="T:SimpleGitVersion.RepositoryInfo"/> based on a path (that can be below the folder with the '.git' sub folder)
            and a function that can create a <see cref="T:SimpleGitVersion.RepositoryInfoOptions"/> from the actual Git repository path. 
            </summary>
            <param name="path">The path to lookup.</param>
            <param name="optionsBuilder">Function that can create a <see cref="T:SimpleGitVersion.RepositoryInfoOptions"/> from the Git working directory (the Solution folder).</param>
            <returns>An immutable RepositoryInfo instance. Never null.</returns>
        </member>
        <member name="T:SimpleGitVersion.RepositoryWriter">
            <summary>
            WIP
            </summary>
        </member>
        <member name="T:SimpleGitVersion.SimpleRepositoryInfo">
            <summary>
            Immutable object that exposes simplified information by wrapping a more complex <see cref="T:SimpleGitVersion.RepositoryInfo"/>.
            The <see cref="M:SimpleGitVersion.SimpleRepositoryInfo.LoadFromPath(SimpleGitVersion.ILogger,System.String,System.Action{SimpleGitVersion.ILogger,System.Boolean,SimpleGitVersion.RepositoryInfoOptions})"/> also handles the read of the RepositoryInfo.xml that may exist 
            at the root of the solution directory (the Repository.xml file creates a <see cref="T:SimpleGitVersion.RepositoryInfoOptions"/> that 
            configures the analysis).
            </summary>
        </member>
        <member name="P:SimpleGitVersion.SimpleRepositoryInfo.Info">
            <summary>
            Gets the <see cref="T:SimpleGitVersion.RepositoryInfo"/> onto which this simplified representation is built.
            Never null.
            </summary>
        </member>
        <member name="P:SimpleGitVersion.SimpleRepositoryInfo.IsValid">
            <summary>
            Gets whether a release can be produced from the current commit point.
            It is either a release or a CI build (see <see cref="P:SimpleGitVersion.SimpleRepositoryInfo.IsValidRelease"/> and <see cref="P:SimpleGitVersion.SimpleRepositoryInfo.IsValidCIBuild"/>).
            </summary>
        </member>
        <member name="P:SimpleGitVersion.SimpleRepositoryInfo.IsValidRelease">
            <summary>
            Gets whether this is a valid, normal, release (not a CI build).
            </summary>
        </member>
        <member name="P:SimpleGitVersion.SimpleRepositoryInfo.IsValidCIBuild">
            <summary>
            Gets whether this is a valid CI build.
            </summary>
        </member>
        <member name="P:SimpleGitVersion.SimpleRepositoryInfo.Major">
            <summary>
            Gets the major version.
            When <see cref="P:SimpleGitVersion.SimpleRepositoryInfo.IsValid"/> is false, it is 0.
            </summary>
        </member>
        <member name="P:SimpleGitVersion.SimpleRepositoryInfo.Minor">
            <summary>
            Gets the minor version.
            When <see cref="P:SimpleGitVersion.SimpleRepositoryInfo.IsValid"/> is false, it is 0.
            </summary>
        </member>
        <member name="P:SimpleGitVersion.SimpleRepositoryInfo.Patch">
            <summary>
            Gets the patch version.
            When <see cref="P:SimpleGitVersion.SimpleRepositoryInfo.IsValid"/> is false, it is 0.
            </summary>
        </member>
        <member name="P:SimpleGitVersion.SimpleRepositoryInfo.PreReleaseName">
            <summary>
            Gets the standard pre release name among <see cref="P:CSemVer.CSVersion.StandardPreReleaseNames"/>.
            <see cref="F:System.String.Empty"/> when this is not a pre release version or <see cref="P:SimpleGitVersion.SimpleRepositoryInfo.IsValid"/> is false.
            </summary>
        </member>
        <member name="P:SimpleGitVersion.SimpleRepositoryInfo.PreReleaseNumber">
            <summary>
            Gets the pre-release number (between 0 and 99).
            Meaningful only if <see cref="P:SimpleGitVersion.SimpleRepositoryInfo.PreReleaseName"/> is not empty. Always 0 otherwise. 
            </summary>
        </member>
        <member name="P:SimpleGitVersion.SimpleRepositoryInfo.PreReleaseFix">
            <summary>
            Gets the the pre-release fix number between 1 and 99. 
            When <see cref="P:SimpleGitVersion.SimpleRepositoryInfo.IsValid"/> is false or if it is not a pre-release fix, it is 0. 
            </summary>
        </member>
        <member name="P:SimpleGitVersion.SimpleRepositoryInfo.MajorMinor">
            <summary>
            Gets the "<see cref="P:SimpleGitVersion.SimpleRepositoryInfo.Major"/>.<see cref="P:SimpleGitVersion.SimpleRepositoryInfo.Minor"/>" as a string: this is the component version (the AssemblyVersion).
            </summary>
        </member>
        <member name="P:SimpleGitVersion.SimpleRepositoryInfo.MajorMinorPatch">
            <summary>
            Gets the "<see cref="P:SimpleGitVersion.SimpleRepositoryInfo.Major"/>.<see cref="P:SimpleGitVersion.SimpleRepositoryInfo.Minor"/>.<see cref="P:SimpleGitVersion.SimpleRepositoryInfo.Patch"/>" as a string.
            </summary>
        </member>
        <member name="P:SimpleGitVersion.SimpleRepositoryInfo.FileVersion">
            <summary>
            Gets the 'Major.Minor.Build.Revision' windows file version to use.
            When <see cref="P:SimpleGitVersion.SimpleRepositoryInfo.IsValid"/> is false, it is '0.0.0.0' (<see cref="F:CSemVer.InformationalVersion.ZeroFileVersion"/>).
            When it is a release the last part (Revision) is even and it is odd for CI builds. 
            </summary>
        </member>
        <member name="P:SimpleGitVersion.SimpleRepositoryInfo.OrderedVersion">
            <summary>
            Gets the ordered version.
            When <see cref="P:SimpleGitVersion.SimpleRepositoryInfo.IsValid"/> it is greater than 0.
            </summary>
        </member>
        <member name="P:SimpleGitVersion.SimpleRepositoryInfo.CurrentUserName">
            <summary>
            Gets the current user name.
            </summary>
        </member>
        <member name="P:SimpleGitVersion.SimpleRepositoryInfo.CommitSha">
            <summary>
            Gets the Sha of the current commit.
            </summary>
        </member>
        <member name="P:SimpleGitVersion.SimpleRepositoryInfo.CommitDateUtc">
            <summary>
            Gets the UTC date and time of the current commit.
            </summary>
        </member>
        <member name="P:SimpleGitVersion.SimpleRepositoryInfo.SafeSemVersion">
            <summary>
            Gets the version in <see cref="F:CSemVer.CSVersionFormat.SemVer"/> format.
            When <see cref="P:SimpleGitVersion.SimpleRepositoryInfo.IsValid"/> is false, it contains the error message (the first error line) so that
            any attempt to use this to actually package something will fail.
            </summary>
        </member>
        <member name="P:SimpleGitVersion.SimpleRepositoryInfo.SafeNuGetVersion">
            <summary>
            Gets the NuGet version to use.
            When <see cref="P:SimpleGitVersion.SimpleRepositoryInfo.IsValid"/> is false, it contains the error message (the first error line) so that
            any attempt to use this to actually package something will fail.
            </summary>
        </member>
        <member name="P:SimpleGitVersion.SimpleRepositoryInfo.OriginalTagText">
            <summary>
            Gets the original tag on the current commit point.
            When <see cref="P:SimpleGitVersion.SimpleRepositoryInfo.IsValid"/> is false or if there is no tag (ie. we are on a CI build), it is null.
            </summary>
        </member>
        <member name="M:SimpleGitVersion.SimpleRepositoryInfo.LoadFromPath(SimpleGitVersion.ILogger,System.String,System.Action{SimpleGitVersion.ILogger,System.Boolean,SimpleGitVersion.RepositoryInfoOptions})">
            <summary>
            Creates a new <see cref="T:SimpleGitVersion.SimpleRepositoryInfo"/> based on a path (that can be below the folder with the '.git' sub folder). 
            </summary>
            <param name="path">The path to lookup.</param>
            <param name="logger">Logger that will be used.</param>
            <param name="optionsChecker">
            Optional action that accepts the logger, a boolean that is true if a RepositoryInfo.xml has been 
            found, and the <see cref="T:SimpleGitVersion.RepositoryInfoOptions"/> that will be used.
            </param>
            <returns>An immutable SimpleRepositoryInfo instance.</returns>
        </member>
        <member name="M:SimpleGitVersion.SimpleRepositoryInfo.#ctor(SimpleGitVersion.ILogger,SimpleGitVersion.RepositoryInfo)">
            <summary>
            Initializes a new <see cref="T:SimpleGitVersion.SimpleRepositoryInfo"/> based on a (more complex) <see cref="P:SimpleGitVersion.SimpleRepositoryInfo.Info"/>.
            </summary>
            <param name="logger">Logger that will be used.</param>
            <param name="info">The simplified repository information.</param>
        </member>
        <member name="P:SimpleGitVersion.SimpleRepositoryInfo.SGVSemVer">
            <summary>
            Gets the semantic version of this SimpleGitVersion.Core.
            </summary>
            <value>This semantic version.</value>
        </member>
        <member name="M:SimpleGitVersion.SimpleRepositoryInfo.BuildAssemblyVersionAttributesFile(System.String,System.String)">
            <summary>
            Builds a standard assembly version attributes file.
            </summary>
            <param name="toolName">Name of the tool.</param>
            <param name="assemblyInformationalVersionInfo">
            The assembly informational version information.
            Defaults to <see cref="M:SimpleGitVersion.SimpleRepositoryInfo.FomatStandardAssemblyInformationalVersionInfo(System.String,System.String,System.String)"/>.
            </param>
            <returns>System.String.</returns>
        </member>
        <member name="M:SimpleGitVersion.SimpleRepositoryInfo.FomatStandardAssemblyInformationalVersionInfo(System.String,System.String,System.String)">
            <summary>
            Fomats the standard assembly informational version information: "<see cref="P:SimpleGitVersion.SimpleRepositoryInfo.SafeNuGetVersion"/> Sha:... User:..."
            </summary>
            <param name="nuGetVersion">The NuGet version.</param>
            <param name="commitSha">The commit sha.</param>
            <param name="userName">Name of the user.</param>
            <returns>Standard informational version.</returns>
        </member>
        <member name="M:SimpleGitVersion.SimpleRepositoryInfo.FormatAssemblyVersionAttributesFile(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Formats the assembly version attributes file.
            </summary>
            <param name="majorMinor">The major.minor: this is used for the AssemblVersion.</param>
            <param name="fileVersion">The file version (4 numbers between 0 and 65535.</param>
            <param name="semVer">The semantic version version.</param>
            <param name="toolName">Name of the tool.</param>
            <param name="assemblyInformationalVersionInfo">The assembly informational version information.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:SimpleGitVersion.CommitVersionInfo">
            <summary>
            Final object describing a commit. Release information can easily be generated from this.
            </summary>
        </member>
        <member name="P:SimpleGitVersion.CommitVersionInfo.CommitSha">
            <summary>
            Gets this commit sha.
            </summary>
        </member>
        <member name="P:SimpleGitVersion.CommitVersionInfo.ThisTag">
            <summary>
            Gets this release tag. Null if no tag is associated to this commit.
            </summary>
        </member>
        <member name="P:SimpleGitVersion.CommitVersionInfo.ThisCommit">
            <summary>
            Gets this <see cref="T:SimpleGitVersion.ITagCommit"/>. Null if no tag is associated to this commit.
            </summary>
        </member>
        <member name="P:SimpleGitVersion.CommitVersionInfo.MaxTag">
            <summary>
            Gets the maximum release tag: it can be this tag, this content tag or a previous tag.
            </summary>
        </member>
        <member name="P:SimpleGitVersion.CommitVersionInfo.MaxCommit">
            <summary>
            Gets the maximmum <see cref="T:SimpleGitVersion.ITagCommit"/>. It can be this commit or any previous commit.
            </summary>
        </member>
        <member name="P:SimpleGitVersion.CommitVersionInfo.PreviousTag">
            <summary>
            Gets the best previous release tag set among the parent commits.
            </summary>
        </member>
        <member name="P:SimpleGitVersion.CommitVersionInfo.PreviousCommit">
            <summary>
            Gets the best previous <see cref="T:SimpleGitVersion.ITagCommit"/> set among the parent commits.
            </summary>
        </member>
        <member name="P:SimpleGitVersion.CommitVersionInfo.PreviousMaxTag">
            <summary>
            Gets the maximum release tag among parents (either explicit tags or tags on content).
            </summary>
        </member>
        <member name="P:SimpleGitVersion.CommitVersionInfo.PreviousMaxCommit">
            <summary>
            Gets the maximum <see cref="T:SimpleGitVersion.ITagCommit"/> among parents (either explicit tags or tags on content).
            </summary>
        </member>
        <member name="P:SimpleGitVersion.CommitVersionInfo.PreviousMaxCommitDepth">
            <summary>
            Gets the number of commits between this commit (longest path) and the <see cref="P:SimpleGitVersion.CommitVersionInfo.PreviousMaxCommit"/>, including this one:
            this is the build index to use for post-releases.
            </summary>
        </member>
        <member name="P:SimpleGitVersion.CommitVersionInfo.PossibleVersions">
            <summary>
            Gets the possible versions on this commit regardless of the actual <see cref="P:SimpleGitVersion.CommitVersionInfo.ThisTag"/> already set on it.
            These possible versions are not necessarily valid.
            </summary>
        </member>
        <member name="P:SimpleGitVersion.CommitVersionInfo.PossibleVersionsStrict">
            <summary>
            Gets the possible versions on this commit in a strict sense: this is a subset 
            of the <see cref="P:SimpleGitVersion.CommitVersionInfo.PossibleVersions"/>.
            A possible versions that is not a <see cref="P:CSemVer.CSVersion.IsPatch"/> do not appear here 
            if a greater version exists in the repository.
            </summary>
        </member>
        <member name="M:SimpleGitVersion.CommitVersionInfo.GetBaseVersions">
            <summary>
            Returns either { PreviousTag, PreviousMaxTag }, { PreviousTag }, { PreviousMaxTag } or { null }.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SimpleGitVersion.CommitVersionInfo.ToString">
            <summary>
            Overridden to describe the content, previous and max previous tags if they exist.
            </summary>
            <returns>Detailed string.</returns>
        </member>
        <member name="T:SimpleGitVersion.IFullTagCommit">
            <summary>
            Extends a <see cref="T:SimpleGitVersion.ITagCommit"/> with information related to the commit content.
            </summary>
        </member>
        <member name="P:SimpleGitVersion.IFullTagCommit.ContentSha">
            <summary>
            Gets this commit content Sha.
            </summary>
        </member>
        <member name="P:SimpleGitVersion.IFullTagCommit.BestCommit">
            <summary>
            Gets the best commit. It is this <see cref="T:SimpleGitVersion.IFullTagCommit"/> if no better version exists on the content.
            </summary>
        </member>
        <member name="M:SimpleGitVersion.IFullTagCommit.GetContentTagCommits(System.Boolean)">
            <summary>
            Gets all <see cref="T:SimpleGitVersion.IFullTagCommit"/> with the same content.
            </summary>
            <param name="withThis">True to include this commit into the list.</param>
            <returns>A list of the commits with the same content.</returns>
        </member>
        <member name="P:SimpleGitVersion.IFullTagCommit.HasContentTagCommits">
            <summary>
            Gets whether the content of this commit is the same as other exitsting tags.
            </summary>
        </member>
        <member name="T:SimpleGitVersion.ITagCommit">
            <summary>
            Describes a commit in the repository with its <see cref="T:CSemVer.CSVersion"/>.
            </summary>
        </member>
        <member name="P:SimpleGitVersion.ITagCommit.CommitSha">
            <summary>
            Gets this commit Sha.
            </summary>
        </member>
        <member name="P:SimpleGitVersion.ITagCommit.ThisTag">
            <summary>
            Gets the valid tag directly associated to this <see cref="P:SimpleGitVersion.ITagCommit.CommitSha"/>.
            </summary>
        </member>
        <member name="T:SimpleGitVersion.TagCollector">
            <summary>
            Discovers existing tags in the repository, resolves them by applying <see cref="F:CSemVer.CSVersion.DefinitionStrength"/>, detects some of the possible inconsistencies
            and provide a <see cref="M:SimpleGitVersion.TagCollector.GetVersionInfo(LibGit2Sharp.Commit)"/> to retrieve commit information.
            </summary>
        </member>
        <member name="P:SimpleGitVersion.TagCollector.StartingVersionForCSemVer">
            <summary>
            Gets the minimal version to consider. When null, the whole repository must be valid in terms of release tags.
            </summary>
        </member>
        <member name="P:SimpleGitVersion.TagCollector.ExistingVersions">
            <summary>
            Gets a read only and ordered list of the existing versions in the repository. 
            If there is no <see cref="P:SimpleGitVersion.TagCollector.StartingVersionForCSemVer"/>, the first version is checked (it must be one of the <see cref="F:CSemVer.CSVersion.FirstPossibleVersions"/>), otherwise
            this existing versions does not contain any version smaller than StartingVersionForCSemVer.
            This existing versions must always be compact (ie. no "holes" must exist between them) otherwise an error is added to the collector.
            </summary>
        </member>
        <member name="M:SimpleGitVersion.TagCollector.#ctor(System.Text.StringBuilder,LibGit2Sharp.Repository,System.String,System.Func{LibGit2Sharp.Commit,SimpleGitVersion.ReleaseTagParsingMode},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Collections.Generic.IReadOnlyList{System.String}}},System.Boolean)">
            <summary>
            Initializes a new <see cref="T:SimpleGitVersion.TagCollector"/>.
            Errors may be appended to the collector that can be syntaxic errors or multiple different versions applied to the same commit point.
            </summary>
            <param name="errors">A collector of errors. One line per error.</param>
            <param name="repo">The Git repository.</param>
            <param name="startingVersionForCSemVer">Vesion tags lower than this version will be ignored.</param>
            <param name="analyseInvalidTagSyntax">
            Optional function that drives the behavior regarding malformed tags of commits.
            When null, <see cref="F:SimpleGitVersion.ReleaseTagParsingMode.IgnoreMalformedTag">IgnoreMalformedTag</see> is used for all tags.
            </param>
            <param name="OverriddenTags">Optional commits with associated tags that are applied as if they exist in the repository.</param>
            <param name="checkValidExistingVersions">
            When true, existing versions are checked: one of the valid first version must exist and exisitng versions
            must be compact.
            </param>
        </member>
        <member name="P:SimpleGitVersion.TagCommit.CommitSha">
            <summary>
            Gets this commit Sha.
            </summary>
        </member>
        <member name="P:SimpleGitVersion.TagCommit.ContentSha">
            <summary>
            Gets this commit content Sha.
            </summary>
        </member>
        <member name="P:SimpleGitVersion.TagCommit.ThisTag">
            <summary>
            Gets the valid tag, if any, directly associated to this <see cref="P:SimpleGitVersion.TagCommit.CommitSha"/>.
            It is necessarily not null once <see cref="T:SimpleGitVersion.TagCollector"/> exposes it: tags that are invalid are 
            removed.
            </summary>
        </member>
        <member name="P:SimpleGitVersion.TagCommit.BestCommit">
            <summary>
            Gets the best commit. This <see cref="T:SimpleGitVersion.IFullTagCommit"/> if no better version exists on the content.
            </summary>
        </member>
        <member name="P:SimpleGitVersion.TagCommit.BestTag">
            <summary>
            Gets <see cref="P:SimpleGitVersion.TagCommit.ThisTag"/> or the best version from the content.
            </summary>
        </member>
        <member name="M:SimpleGitVersion.TagCommit.GetContentTagCommits(System.Boolean)">
            <summary>
            Gets all <see cref="T:SimpleGitVersion.IFullTagCommit"/> with the same content.
            </summary>
            <param name="withThis">True to include this commit into the list.</param>
            <returns>A list of the commits with the same content.</returns>
        </member>
        <member name="P:SimpleGitVersion.TagCommit.HasContentTagCommits">
            <summary>
            Gets whether the content of this commit is the same as other exitsting tags.
            </summary>
        </member>
        <member name="M:SimpleGitVersion.TagCommit.CloseCollect(System.Text.StringBuilder)">
            <summary>
            Computes the final release tag: +invalid hides any other version tags.
            If multiple versions exist on this commit, an error is raised.
            </summary>
            <param name="errors">Errors collector.</param>
            <returns>False it this tag is invalid.</returns>
        </member>
        <member name="T:SimpleGitVersion.UsefulExtensions">
            <summary>
            Miscellaneous extension methods.
            </summary>
        </member>
        <member name="M:SimpleGitVersion.UsefulExtensions.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns the maximal element of the given sequence based on
            a projection of comparable keys. The sequence MUST NOT 
            be empty otherwise an <see cref="T:System.InvalidOperationException"/> is thrown.
            (borrowed from CK.Core.)
            </summary>
            <remarks>
            If more than one element has the maximal projected value, the first
            one encountered will be returned. This operator uses immediate execution, but
            only buffers a single result (the current maximal element).
            </remarks>
            <typeparam name="TSource">Type of the source sequence.</typeparam>
            <typeparam name="TKey">Type of the projected element. Must be <see cref="T:System.IComparable`1"/>.</typeparam>
            <param name="this">Source sequence.</param>
            <param name="selector">Selector to use to pick the results to compare</param>
            <returns>The maximal element, according to the projection.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="this"/> or <paramref name="selector"/> is null</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="this"/> is empty</exception>       
        </member>
        <member name="M:SimpleGitVersion.UsefulExtensions.BinarySearch``2(System.Collections.Generic.IReadOnlyList{``0},System.Int32,System.Int32,``1)">
            <summary>
            Binary search implementation that relies on <see cref="T:System.IComparable`1"/> implemented by the <typeparamref name="T"/>.
            (Borrowed from CK.Core.)
            </summary>
            <typeparam name="T">Type of the elements. It must implement <see cref="T:System.IComparable`1"/>.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="this">This read only list of elements.</param>
            <param name="startIndex">The starting index in the list.</param>
            <param name="length">The number of elements to consider in the list.</param>
            <param name="value">The value to locate.</param>
            <returns>Same as <see cref="M:System.Array.BinarySearch(System.Array,System.Object)"/>: negative index if not found which is the bitwise complement of (the index of the next element plus 1).</returns>
        </member>
        <member name="M:SimpleGitVersion.UsefulExtensions.BinarySearch``2(System.Collections.Generic.IReadOnlyList{``0},``1)">
            <summary>
            Binary search implementation that relies on <see cref="T:System.IComparable`1"/> implemented by the <typeparamref name="T"/>.
            (Borrowed from CK.Core.)
            </summary>
            <typeparam name="T">Type of the elements. It must implement <see cref="T:System.IComparable`1"/>.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="this">This read only list of elements.</param>
            <param name="value">The value to locate.</param>
            <returns>Same as <see cref="M:System.Array.BinarySearch(System.Array,System.Object)"/>: negative index if not found which is the bitwise complement of (the index of the next element plus 1).</returns>
        </member>
        <member name="T:SimpleGitVersionInfoAttribute">
            <summary>
            Automatically generated by SimpleGitVersionTask 0.28.0. 
            </summary>
        </member>
    </members>
</doc>
