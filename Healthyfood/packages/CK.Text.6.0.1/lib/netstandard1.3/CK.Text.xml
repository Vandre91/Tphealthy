<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CK.Text</name>
    </assembly>
    <members>
        <member name="T:CK.Text.Impl.CoreResources">
            <summary>
            Resource class, avoids magic strings and may ease multiligual support.
            </summary>
        </member>
        <member name="T:CK.Text.IStringMatcher">
            <summary>
            This interface contains the definition for string matchers parameters. 
            It contains text and matcher properties and some basic methods.
            </summary>
        </member>
        <member name="M:CK.Text.IStringMatcher.GetText(System.Int64,System.Int32)">
            <summary>
            Returns a substring from the text in the given range.
            </summary>
            <param name="index">The index to start the string from.</param>
            <param name="length">The length of the string.</param>
            <returns></returns>
        </member>
        <member name="P:CK.Text.IStringMatcher.StartIndex">
            <summary>
            Gets the current start index.
            </summary>
            <value>The current start index.</value>
        </member>
        <member name="P:CK.Text.IStringMatcher.Head">
            <summary>
            Gets the current head: the character at index <see cref="P:CK.Text.IStringMatcher.StartIndex"/>.
            </summary>
            <value>The head.</value>
        </member>
        <member name="P:CK.Text.IStringMatcher.Length">
            <summary>
            Gets the current length available.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:CK.Text.IStringMatcher.IsEnd">
            <summary>
            Gets whether this matcher is at the end of the text to match.
            </summary>
            <value><c>true</c> on end; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CK.Text.IStringMatcher.Success">
            <summary>
            Is used by <see cref="P:CK.Text.IStringMatcher.ShouldStop"/>. Setting this to true will set <see cref="P:CK.Text.IStringMatcher.ShouldStop"/> to true.
            </summary>
            <value><c>true</c> on success; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CK.Text.IStringMatcher.ShouldStop">
            <summary>
            Gets whether the matcher should stop.
            </summary>
            <value><c>true</c> on <see cref="P:CK.Text.IStringMatcher.Success"/> or on error if <see cref="P:CK.Text.IStringMatcher.ShouldStopOnError"/> is true; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CK.Text.IStringMatcher.IsError">
            <summary>
            Gets whether an error has been set.
            You can call <see cref="M:CK.Text.IStringMatcher.ClearError"/> to clear the error.
            </summary>
            <value><c>true</c> on error; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CK.Text.IStringMatcher.ShouldStopOnError">
            <summary>
            Gets whether the matcher should stop on error.
            Setting this to true will set <see cref="P:CK.Text.IStringMatcher.ShouldStop"/> to true when <see cref="P:CK.Text.IStringMatcher.IsError"/> is true.
            </summary>
            <value><c>true</c> if we want to stop; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CK.Text.IStringMatcher.ErrorMessage">
            <summary>
            Gets the error message if any.
            You can call <see cref="M:CK.Text.IStringMatcher.ClearError"/> to clear the error.
            </summary>
            <value>The error message. Null when no error.</value>
        </member>
        <member name="M:CK.Text.IStringMatcher.SetError(System.Object,System.String)">
            <summary>
            Sets an error and always returns false. The message starts with the caller's method name.
            Use <see cref="M:CK.Text.IStringMatcher.ClearError"/> to clear any existing error.
            </summary>
            <param name="expectedMessage">
            Optional object. Its <see cref="M:System.Object.ToString"/> will be used to generate an "expected '...'" message.
            </param>
            <param name="callerName">Name of the caller (automatically injected by the compiler).</param>
            <returns>Always false to use it as the return statement in a match method.</returns>
        </member>
        <member name="M:CK.Text.IStringMatcher.AddError(System.Object,System.Boolean,System.String)">
            <summary>
            Adds an error (the message starts with the caller's method name) to the existing ones (if any).
            </summary>
            <param name="expectedMessage">
            Optional object. Its <see cref="M:System.Object.ToString"/> will be used to generate an "expected '...'" message.
            </param>
            <param name="beforeExisting">
            True to add the error before the existing ones (as a consequence: [added] &lt;-- [previous]), 
            false to append it (as a cause: [previous] &lt;-- [added])</param>
            <param name="callerName">Name of the caller (automatically injected by the compiler).</param>
            <returns>Always false to use it as the return statement in a match method.</returns>
        </member>
        <member name="M:CK.Text.IStringMatcher.ClearError">
            <summary>
            Clears any error and returns true. 
            </summary>
            <returns>Always true to use it as the return statement in a match method.</returns>
        </member>
        <member name="M:CK.Text.IStringMatcher.BackwardAddError(System.Int64,System.Object,System.String)">
            <summary>
            Moves back the head at a previously index and adds an error as a consequence of any previous errors. 
            The message starts with the caller's method name.
            </summary>
            <param name="savedStartIndex">Index to reset.</param>
            <param name="expectedMessage">
            Optional object. Its <see cref="M:System.Object.ToString"/> will be used to generate an "expected '...'" message.
            </param>
            <param name="callerName">Name of the caller (automatically injected by the compiler).</param>
            <returns>Always false to use it as the return statement in a match method.</returns>
        </member>
        <member name="M:CK.Text.IStringMatcher.UncheckedMove(System.Int64)">
            <summary>
            Moves the head without any check and returns always true: typically called by 
            successful TryMatchXXX methods.
            Can be used to move the head at any position in the <see cref="N:CK.Text"/> (or outside it since NO checks are made).
            </summary>
            <param name="delta">Number of characters.</param>
            <returns>Always <c>true</c>.</returns>
        </member>
        <member name="M:CK.Text.IStringMatcher.Forward(System.Int64)">
            <summary>
            Increments the <see cref="P:CK.Text.IStringMatcher.StartIndex"/> (and decrements <see cref="P:CK.Text.IStringMatcher.Length"/>) with the 
            specified character count and clears any existing error. Always returns true.
            </summary>
            <param name="charCount">The successfully matched character count. 
            Must be positive and should not move head past the end of the substring.</param>
            <returns>Always true to use it as the return statement in a match method.</returns>
        </member>
        <member name="M:CK.Text.IStringMatcher.MatchChar(System.Char)">
            <summary>
            Matches an exact single character. 
            If match fails, <see cref="M:CK.Text.IStringMatcher.SetError(System.Object,System.String)"/> is called.
            </summary>
            <param name="c">The character that must match.</param>
            <returns>True on success, false if the match failed.</returns>
        </member>
        <member name="M:CK.Text.IStringMatcher.TryMatchChar(System.Char)">
            <summary>
            Attempts to match an exact single character. 
            </summary>
            <param name="c">The character that must match.</param>
            <returns>True on success, false if the match failed.</returns>
        </member>
        <member name="M:CK.Text.IStringMatcher.MatchText(System.String,System.StringComparison)">
            <summary>
            Matches a text.
            </summary>
            <param name="text">The string that must match. Can not be null nor empty.</param>
            <param name="comparisonType">Specifies the culture, case, and sort rules.</param>
            <returns>True on success, false if the match failed.</returns>
        </member>
        <member name="M:CK.Text.IStringMatcher.TryMatchText(System.String,System.StringComparison)">
            <summary>
            Matches a text without setting an error if match fails.
            </summary>
            <param name="text">The string that must match. Can not be null nor empty.</param>
            <param name="comparisonType">Specifies the culture, case, and sort rules.</param>
            <returns>True on success, false if the match failed.</returns>
        </member>
        <member name="M:CK.Text.IStringMatcher.MatchWhiteSpaces(System.Int32)">
            <summary>
            Matches a sequence of white spaces.
            Use <paramref name="minCount"/> = 0 to skip any white spaces.
            </summary>
            <param name="minCount">Minimal number of white spaces to match.</param>
            <returns>True on success, false if the match failed.</returns>
        </member>
        <member name="T:CK.Text.IStringMatcherExtension">
            <summary>
            Extends <see cref="T:CK.Text.IStringMatcher"/> with useful (yet basic) methods.
            </summary>
        </member>
        <member name="M:CK.Text.IStringMatcherExtension.MatchInt32(CK.Text.IStringMatcher,System.Int32@,System.Int32,System.Int32)">
            <summary>
            Matches Int32 values that must not start with '0' ('0' is valid but '0d', where d is any digit, is not).
            A signed integer starts with a '-'. '-0' is valid but '-0d' (where d is any digit) is not.
            If the value is to big for an Int32, it fails.
            </summary>
            <param name="this">This <see cref="T:CK.Text.IStringMatcher"/>.</param>
            <param name="i">The result integer. 0 on failure.</param>
            <param name="minValue">Optional minimal value.</param>
            <param name="maxValue">Optional maximal value.</param>
            <returns><c>true</c> when matched, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:CK.Text.IStringMatcherExtension.TryMatchJSComment(CK.Text.IStringMatcher)">
            <summary>
            Tries to match a //.... or /* ... */ comment.
            Proper termination of comment (by a new line or the closing */) is not required: 
            a ending /*... is considered valid.
            </summary>
            <param name="this">This <see cref="T:CK.Text.IStringMatcher"/>.</param>
            <returns>True on success, false if the <see cref="P:CK.Text.IStringMatcher.Head"/> is not on a /.</returns>
        </member>
        <member name="M:CK.Text.IStringMatcherExtension.SkipWhiteSpacesAndJSComments(CK.Text.IStringMatcher)">
            <summary>
            Skips any white spaces or JS comments (//... or /* ... */) and always returns true.
            </summary>
            <param name="this">This <see cref="T:CK.Text.IStringMatcher"/>.</param>
            <returns>Always true to ease composition.</returns>
        </member>
        <member name="T:CK.Text.JSONVisitor">
            <summary>
            Small JSON visitor.
            </summary>
        </member>
        <member name="T:CK.Text.JSONVisitor.Parent">
            <summary>
            Describes a parent object: it is the name of a property and its index or the index in a array.
            </summary>
        </member>
        <member name="F:CK.Text.JSONVisitor.Parent.PropertyName">
            <summary>
            The name of the property or null if this is an array entry.
            </summary>
        </member>
        <member name="F:CK.Text.JSONVisitor.Parent.Index">
            <summary>
            The index in the array or the property number (the count of properties 
            that appear before this one in the object definition).
            </summary>
        </member>
        <member name="P:CK.Text.JSONVisitor.Parent.IsArrayCell">
            <summary>
            Gets whether this is an array cell (ie. <see cref="F:CK.Text.JSONVisitor.Parent.PropertyName"/> is null). 
            </summary>
        </member>
        <member name="M:CK.Text.JSONVisitor.Parent.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new parent object.
            </summary>
            <param name="propertyName">Name of the property. Null for an array entry.</param>
            <param name="index">Index of the property or index in an array.</param>
        </member>
        <member name="M:CK.Text.JSONVisitor.Parent.ToString">
            <summary>
            Overridden to return either <see cref="F:CK.Text.JSONVisitor.Parent.PropertyName"/> or [<see cref="F:CK.Text.JSONVisitor.Parent.Index"/>].
            </summary>
            <returns>Representation of the accessor.</returns>
        </member>
        <member name="M:CK.Text.JSONVisitor.#ctor(CK.Text.StringMatcher)">
            <summary>
            Initializes a new <see cref="T:CK.Text.JSONVisitor"/> bound to a <see cref="P:CK.Text.JSONVisitor.Matcher"/>.
            </summary>
            <param name="m">The string matcher.</param>
        </member>
        <member name="M:CK.Text.JSONVisitor.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:CK.Text.JSONVisitor"/> on a string. 
            A <see cref="P:CK.Text.JSONVisitor.Matcher"/> is automatically created.
            </summary>
            <param name="s">The string to parse.</param>
        </member>
        <member name="P:CK.Text.JSONVisitor.Matcher">
            <summary>
            Get the <see cref="T:CK.Text.StringMatcher"/> to which this visitor is bound.
            </summary>
        </member>
        <member name="P:CK.Text.JSONVisitor.Path">
            <summary>
            Gets the current path of the visited item.
            </summary>
        </member>
        <member name="M:CK.Text.JSONVisitor.Visit">
            <summary>
            Visits any json item: it is either a terminal (<see cref="M:CK.Text.JSONVisitor.VisitTerminalValue"/>), 
            {"an":"object"} (see <see cref="M:CK.Text.JSONVisitor.VisitObjectContent"/> or ["an","array"] (see <see cref="M:CK.Text.JSONVisitor.VisitArrayContent"/>).
            </summary>
            <returns>True on success. On error a message may be retrieved from the <see cref="P:CK.Text.JSONVisitor.Matcher"/>.</returns>
        </member>
        <member name="M:CK.Text.JSONVisitor.VisitObjectContent">
            <summary>
            Visits a comma seprarated list of "property" : ... fields until a closing } is found
            or <see cref="P:CK.Text.JSONVisitor.Matcher"/>.<see cref="P:CK.Text.StringMatcher.IsEnd">IsEnd</see> becomes true.
            </summary>
            <returns>True on success. On error a message may be retrieved from the <see cref="P:CK.Text.JSONVisitor.Matcher"/>.</returns>
        </member>
        <member name="M:CK.Text.JSONVisitor.VisitObjectProperty(System.Int32,System.String,System.Int32)">
            <summary>
            Visits a "property" : ... JSON property.
            </summary>
            <param name="startPropertyIndex">
            Starting index of the <paramref name="propertyName"/> in <see cref="P:CK.Text.JSONVisitor.Matcher"/>:
            this is the index of the opening quote ".
            </param>
            <param name="propertyName">Parsed property name.</param>
            <param name="propertyNumber">Zero based number of the property in the <see cref="T:CK.Text.JSONVisitor.Parent"/> object.</param>
            <returns>True on success. On error a message may be retrieved from the <see cref="P:CK.Text.JSONVisitor.Matcher"/>.</returns>
        </member>
        <member name="M:CK.Text.JSONVisitor.VisitArrayContent">
            <summary>
            Visits a comma seprarated list of json items until a closing ']' is found.
            </summary>
            <returns>True on success. On error a message may be retrieved from the <see cref="P:CK.Text.JSONVisitor.Matcher"/>.</returns>
        </member>
        <member name="M:CK.Text.JSONVisitor.VisitArrayCell(System.Int32)">
            <summary>
            Visits a cell in a <see cref="T:CK.Text.JSONVisitor.Parent"/> array.
            </summary>
            <param name="cellNumber">Zero based cell nummber.</param>
            <returns>True on success. On error a message may be retrieved from the <see cref="P:CK.Text.JSONVisitor.Matcher"/>.</returns>
        </member>
        <member name="M:CK.Text.JSONVisitor.VisitTerminalValue">
            <summary>
            Visits a terminal value. This method simply calls <see cref="M:CK.Text.StringMatcher.MatchWhiteSpaces(System.Int32)">Matcher.MatchWhiteSpaces(0)</see>
            to skip any whitespace and <see cref="M:CK.Text.StringMatcherTextExtension.TryMatchJSONTerminalValue(CK.Text.StringMatcher)">TryMatchJSONTerminalValue</see>
            to skip the value itself.
            </summary>
            <returns>True on success. On error a message may be retrieved from the <see cref="P:CK.Text.JSONVisitor.Matcher"/>.</returns>
        </member>
        <member name="M:CK.Text.JSONVisitor.SkipWhiteSpaces">
            <summary>
            Skips white spaces: simply calls <see cref="M:CK.Text.StringMatcher.MatchWhiteSpaces(System.Int32)"/> 
            with 0 minimal count of spaces.
            </summary>
        </member>
        <member name="T:CK.Text.StringAndStringBuilderExtension">
            <summary>
            Defines useful extension methods on string and StringBuilder.
            </summary>
        </member>
        <member name="M:CK.Text.StringAndStringBuilderExtension.Concatenate(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Concatenates multiple strings with an internal separator.
            </summary>
            <param name="this">Set of strings.</param>
            <param name="separator">The separator string.</param>
            <returns>The joined string.</returns>
        </member>
        <member name="M:CK.Text.StringAndStringBuilderExtension.AppendStrings(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Appends a set of strings with an internal separator.
            (This should be named 'Append' but appropriate overload is not always detected by the compiler.)
            </summary>
            <param name="this">The <see cref="T:System.Text.StringBuilder"/> to append to.</param>
            <param name="strings">Set of strings. Can be null.</param>
            <param name="separator">The separator string.</param>
            <returns>The builder itself.</returns>
        </member>
        <member name="M:CK.Text.StringAndStringBuilderExtension.Append(System.Text.StringBuilder,System.String,System.Int32)">
            <summary>
            Appends multiple time the same string.
            </summary>
            <param name="this">The <see cref="T:System.Text.StringBuilder"/> to append to.</param>
            <param name="s">The string to repeat. Can be null.</param>
            <param name="repeatCount">The number of repetition.</param>
            <returns>The builder itself.</returns>
        </member>
        <member name="M:CK.Text.StringAndStringBuilderExtension.NormalizeEOL(System.String)">
            <summary>
            Returns a string where \r\n or \n alone are normalized to <see cref="P:System.Environment.NewLine"/>.
            </summary>
            <param name="this">This string.</param>
            <returns>Normalized string.</returns>
        </member>
        <member name="M:CK.Text.StringAndStringBuilderExtension.NormalizeEOLToLF(System.String)">
            <summary>
            Returns a string where \r\n are normalized to \n.
            </summary>
            <param name="this">This string.</param>
            <returns>Normalized string.</returns>
        </member>
        <member name="M:CK.Text.StringAndStringBuilderExtension.NormalizeEOLToCRLF(System.String)">
            <summary>
            Returns a string where \n alone are normalized to \r\n.
            </summary>
            <param name="this">This string.</param>
            <returns>Normalized string.</returns>
        </member>
        <member name="P:CK.Text.StringAndStringBuilderExtension.IsCRLF">
            <summary>
            Gets wether the <see cref="P:System.Environment.NewLine"/> is \r\n.
            Otherwise it is \n.
            </summary>
        </member>
        <member name="M:CK.Text.StringAndStringBuilderExtension.HexDigitValue(System.Char)">
            <summary>
            Gets the value (0...15) for this character ('0'...'9', 'a'...'f' or 'A.'..'F'),
            or -1 if this is not an hexadecimal digit.
            </summary>
            <param name="c">This character.</param>
            <returns>The value for this character or -1 if this is not an hexadecimal digit.</returns>
        </member>
        <member name="M:CK.Text.StringAndStringBuilderExtension.AppendMultiLine(System.Text.StringBuilder,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Appends a block of text to this StringBuilder with a prefix on each line.
            <c>b.AppendMultiLine( prefix, text, false, true )</c> is the same as the naive approach, 
            that is to add <c>text.Replace( Environment.NewLine, Environment.NewLine + prefix )</c>.
            This method is faster (in release build), normalizes EOL (\n, \r and \r\n) 
            to <see cref="P:System.Environment.NewLine"/> and offer a better and easier control with its
            parameters <paramref name="prefixOnFirstLine"/> and <paramref name="prefixLastEmptyLine"/>.
            </summary>
            <param name="this">This string builder.</param>
            <param name="prefix">The prefix to add. When null or empty, the text is appended as-is.</param>
            <param name="text">The multiple lines text to append. Can be null or empty.</param>
            <param name="prefixOnFirstLine">True to append the prefix to the first line. False to skip this first prefix.</param>
            <param name="prefixLastEmptyLine">
            True to append the prefix to the last empty line (when the text ends with an EOL).
            By default, when text ends with a EOL, it is ignored.
            </param>
            <returns></returns>
        </member>
        <member name="T:CK.Text.StringMatcher">
            <summary>
            This class supports "Match and Forward" pattern.
            On a failed match, the <see cref="M:CK.Text.StringMatcher.SetError(System.Object,System.String)"/> method sets the <see cref="P:CK.Text.StringMatcher.ErrorMessage"/>.
            On a successful match, the <see cref="P:CK.Text.StringMatcher.StartIndex"/> is updated by a call to <see cref="M:CK.Text.StringMatcher.Forward(System.Int32)"/> so that 
            the <see cref="P:CK.Text.StringMatcher.Head"/> is positioned after the match (and any existing error is cleared).
            There are 2 main kind of methods: TryMatchXXX that when the match fails returns false but do not call 
            <see cref="M:CK.Text.StringMatcher.SetError(System.Object,System.String)"/>and MatchXXX that do set an error on failure.
            This class does not actually hide/encapsulate a lot of things: it is designed to be extended through 
            extension methods.
            </summary>
        </member>
        <member name="M:CK.Text.StringMatcher.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CK.Text.StringMatcher"/> class on a non null string.
            </summary>
            <param name="text">The string to parse.</param>
            <param name="startIndex">Index where the match must start in <paramref name="text"/>.</param>
        </member>
        <member name="M:CK.Text.StringMatcher.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CK.Text.StringMatcher"/> class on a substring.
            </summary>
            <param name="text">The string to parse. Can not be null.</param>
            <param name="startIndex">
            Index where the match must start in <paramref name="text"/>.
            </param>
            <param name="length">
            Number of characters to consider in the string.
            If <paramref name="startIndex"/> + length is greater than the length of the string, an <see cref="T:System.ArgumentException"/> is thrown.
            </param>
        </member>
        <member name="P:CK.Text.StringMatcher.Text">
            <summary>
            Gets the whole text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="M:CK.Text.StringMatcher.GetText(System.Int32,System.Int32)">
            <summary>
            Returns a string from the string in the given range.
            </summary>
            <param name="index">The index to start the string from.</param>
            <param name="length">The length of the string.</param>
            <returns>The string containing characters in the range.</returns>
        </member>
        <member name="P:CK.Text.StringMatcher.ShouldStopOnError">
            <summary>
            Gets whether the matcher should stop on error.
            Setting this to true will set <see cref="P:CK.Text.StringMatcher.ShouldStop"/> to true when <see cref="P:CK.Text.StringMatcher.IsError"/> is true.
            </summary>
            <value><c>true</c> if we want to stop; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CK.Text.StringMatcher.Success">
            <summary>
            Is used by <see cref="P:CK.Text.StringMatcher.ShouldStop"/>. Setting this to true will set <see cref="P:CK.Text.StringMatcher.ShouldStop"/> to true.
            </summary>
            <value><c>true</c> on success; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CK.Text.StringMatcher.ShouldStop">
            <summary>
            Gets whether the matcher should stop.
            </summary>
            <value><c>true</c> on <see cref="P:CK.Text.StringMatcher.Success"/> or on error if <see cref="P:CK.Text.StringMatcher.ShouldStopOnError"/> is true; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CK.Text.StringMatcher.StartIndex">
            <summary>
            Gets the current start index: this is incremented by <see cref="M:CK.Text.StringMatcher.Forward(System.Int32)"/>
            or <see cref="M:CK.Text.StringMatcher.UncheckedMove(System.Int32)"/>.
            </summary>
            <value>The current start index.</value>
        </member>
        <member name="P:CK.Text.StringMatcher.Head">
            <summary>
            Gets the current head: this is the character in <see cref="P:CK.Text.StringMatcher.Text"/> at index <see cref="P:CK.Text.StringMatcher.StartIndex"/>.
            </summary>
            <value>The head.</value>
        </member>
        <member name="P:CK.Text.StringMatcher.Length">
            <summary>
            Gets the current length available.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:CK.Text.StringMatcher.IsEnd">
            <summary>
            Gets whether this matcher is at the end of the text to match.
            </summary>
            <value><c>true</c> on end; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CK.Text.StringMatcher.IsError">
            <summary>
            Gets whether an error has been set.
            You can call <see cref="M:CK.Text.StringMatcher.ClearError"/> to clear the error.
            </summary>
            <value><c>true</c> on error; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CK.Text.StringMatcher.ErrorMessage">
            <summary>
            Gets the error message if any.
            You can call <see cref="M:CK.Text.StringMatcher.ClearError"/> to clear the error.
            </summary>
            <value>The error message. Null when no error.</value>
        </member>
        <member name="M:CK.Text.StringMatcher.SetError(System.Object,System.String)">
            <summary>
            Sets an error and always returns false. The message starts with the caller's method name.
            Use <see cref="M:CK.Text.StringMatcher.ClearError"/> to clear any existing error.
            </summary>
            <param name="expectedMessage">
            Optional object. Its <see cref="M:System.Object.ToString"/> will be used to generate an "expected '...'" message.
            </param>
            <param name="callerName">Name of the caller (automatically injected by the compiler).</param>
            <returns>Always false to use it as the return statement in a match method.</returns>
        </member>
        <member name="M:CK.Text.StringMatcher.AddError(System.Object,System.Boolean,System.String)">
            <summary>
            Adds an error (the message starts with the caller's method name) to the existing ones (if any).
            </summary>
            <param name="expectedMessage">
            Optional object. Its <see cref="M:System.Object.ToString"/> will be used to generate an "expected '...'" message.
            </param>
            <param name="beforeExisting">
            True to add the error before the existing ones (as a consequence: [added] &lt;-- [previous]), 
            false to append it (as a cause: [previous] &lt;-- [added])</param>
            <param name="callerName">Name of the caller (automatically injected by the compiler).</param>
            <returns>Always false to use it as the return statement in a match method.</returns>
        </member>
        <member name="M:CK.Text.StringMatcher.ClearError">
            <summary>
            Clears any error and returns true. 
            </summary>
            <returns>Always true to use it as the return statement in a match method.</returns>
        </member>
        <member name="M:CK.Text.StringMatcher.BackwardAddError(System.Int32,System.Object,System.String)">
            <summary>
            Moves back the head at a previously index and adds an error as a consequence of any previous errors. 
            The message starts with the caller's method name.
            </summary>
            <param name="savedStartIndex">Index to reset.</param>
            <param name="expectedMessage">
            Optional object. Its <see cref="M:System.Object.ToString"/> will be used to generate an "expected '...'" message.
            </param>
            <param name="callerName">Name of the caller (automatically injected by the compiler).</param>
            <returns>Always false to use it as the return statement in a match method.</returns>
        </member>
        <member name="M:CK.Text.StringMatcher.UncheckedMove(System.Int32)">
            <summary>
            Moves the head without any check and returns always true: typically called by 
            successful TryMatchXXX methods.
            Can be used to move the head at any position in the <see cref="P:CK.Text.StringMatcher.Text"/> (or outside it since NO checks are made).
            </summary>
            <param name="delta">Number of characters.</param>
            <returns>Always <c>true</c>.</returns>
        </member>
        <member name="M:CK.Text.StringMatcher.Forward(System.Int32)">
            <summary>
            Increments the <see cref="P:CK.Text.StringMatcher.StartIndex"/> (and decrements <see cref="P:CK.Text.StringMatcher.Length"/>) with the 
            specified character count and clears any existing error. Always returns true.
            </summary>
            <param name="charCount">The successfully matched character count. 
            Must be positive and should not move head past the end of the substring.</param>
            <returns>Always true to use it as the return statement in a match method.</returns>
        </member>
        <member name="M:CK.Text.StringMatcher.MatchChar(System.Char)">
            <summary>
            Matches an exact single character. 
            If match fails, <see cref="M:CK.Text.StringMatcher.SetError(System.Object,System.String)"/> is called.
            </summary>
            <param name="c">The character that must match.</param>
            <returns>True on success, false if the match failed.</returns>
        </member>
        <member name="M:CK.Text.StringMatcher.TryMatchChar(System.Char)">
            <summary>
            Attempts to match an exact single character. 
            </summary>
            <param name="c">The character that must match.</param>
            <returns>True on success, false if the match failed.</returns>
        </member>
        <member name="M:CK.Text.StringMatcher.TryMatchText(System.String,System.StringComparison)">
            <summary>
            Matches a text without setting an error if match fails.
            </summary>
            <param name="text">The string that must match. Can not be null nor empty.</param>
            <param name="comparisonType">Specifies the culture, case, and sort rules.</param>
            <returns>True on success, false if the match failed.</returns>
        </member>
        <member name="M:CK.Text.StringMatcher.MatchText(System.String,System.StringComparison)">
            <summary>
            Matches a text.
            </summary>
            <param name="text">The string that must match. Can not be null nor empty.</param>
            <param name="comparisonType">Specifies the culture, case, and sort rules.</param>
            <returns>True on success, false if the match failed.</returns>
        </member>
        <member name="M:CK.Text.StringMatcher.MatchWhiteSpaces(System.Int32)">
            <summary>
            Matches a sequence of white spaces.
            Use <paramref name="minCount"/> = 0 to skip any white spaces.
            </summary>
            <param name="minCount">Minimal number of white spaces to match.</param>
            <returns>True on success, false if the match failed.</returns>
        </member>
        <member name="M:CK.Text.StringMatcher.ToString">
            <summary>
            Overridden to return a detailed string with <see cref="P:CK.Text.StringMatcher.ErrorMessage"/> (if any),
            the <see cref="P:CK.Text.StringMatcher.Head"/> character, <see cref="P:CK.Text.StringMatcher.StartIndex"/> position and
            whole <see cref="P:CK.Text.StringMatcher.Text"/>.
            </summary>
            <returns>Detailed string.</returns>
        </member>
        <member name="T:CK.Text.StringMatcherTextExtension">
            <summary>
            Extends <see cref="T:CK.Text.StringMatcher"/> with useful (yet basic) methods.
            </summary>
        </member>
        <member name="M:CK.Text.StringMatcherTextExtension.TryMatchGuid(CK.Text.StringMatcher,System.Guid@)">
            <summary>
            Matches a Guid. No error is set if match fails.
            </summary>
            <remarks>
            Any of the 5 forms of Guid can be matched:
            <list type="table">
            <item><term>N</term><description>00000000000000000000000000000000</description></item>
            <item><term>D</term><description>00000000-0000-0000-0000-000000000000</description></item>
            <item><term>B</term><description>{00000000-0000-0000-0000-000000000000}</description></item>
            <item><term>P</term><description>(00000000-0000-0000-0000-000000000000)</description></item>
            <item><term>X</term><description>{0x00000000,0x0000,0x0000,{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}}</description></item>
            </list>
            </remarks>
            <param name="this">This <see cref="T:CK.Text.StringMatcher"/>.</param>
            <param name="id">The result Guid. <see cref="F:System.Guid.Empty"/> on failure.</param>
            <returns><c>true</c> when matched, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:CK.Text.StringMatcherTextExtension.TryMatchJSONQuotedString(CK.Text.StringMatcher,System.String@,System.Boolean)">
            <summary>
            Matches a JSON quoted string without setting an error if match fails.
            </summary>
            <param name="this">This <see cref="T:CK.Text.StringMatcher"/>.</param>
            <param name="content">Extracted content.</param>
            <param name="allowNull">True to allow 'null'.</param>
            <returns><c>true</c> when matched, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:CK.Text.StringMatcherTextExtension.TryMatchJSONQuotedString(CK.Text.StringMatcher,System.Boolean)">
            <summary>
            Matches a quoted string without extracting its content.
            </summary>
            <param name="this">This <see cref="T:CK.Text.StringMatcher"/>.</param>
            <param name="allowNull">True to allow 'null'.</param>
            <returns><c>true</c> when matched, <c>false</c> otherwise.</returns>
        </member>
        <member name="F:CK.Text.StringMatcherTextExtension.RegexDouble">
            <summary>
            The <see cref="T:System.Text.RegularExpressions.Regex"/> that <see cref="M:CK.Text.StringMatcherTextExtension.TryMatchDoubleValue(CK.Text.StringMatcher)"/> uses to avoid
            calling <see cref="M:System.Double.TryParse(System.String,System.Double@)"/> when resolving the value is 
            useless.
            </summary>
        </member>
        <member name="M:CK.Text.StringMatcherTextExtension.TryMatchDoubleValue(CK.Text.StringMatcher)">
            <summary>
            Matches a double without getting its value nor setting an error if match fails.
            This uses <see cref="F:CK.Text.StringMatcherTextExtension.RegexDouble"/>.
            </summary>
            <param name="this">This <see cref="T:CK.Text.StringMatcher"/>.</param>
            <returns><c>true</c> when matched, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:CK.Text.StringMatcherTextExtension.TryMatchDoubleValue(CK.Text.StringMatcher,System.Double@)">
            <summary>
            Matches a double and gets its value. No error is set if match fails.
            </summary>
            <param name="this">This <see cref="T:CK.Text.StringMatcher"/>.</param>
            <param name="value">The read value on success.</param>
            <returns><c>true</c> when matched, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:CK.Text.StringMatcherTextExtension.TryMatchJSONTerminalValue(CK.Text.StringMatcher)">
            <summary>
            Matches a JSON terminal value: a "string", null, a number (double value), true or false.
            This method ignores the actual value and does not set any error if match fails.
            </summary>
            <param name="this">This <see cref="T:CK.Text.StringMatcher"/>.</param>
            <returns>True if a JSON value has been matched, false otherwise.</returns>
        </member>
        <member name="M:CK.Text.StringMatcherTextExtension.TryMatchJSONValue(CK.Text.StringMatcher,System.Object@)">
            <summary>
            Obsolete: renamed to TryMatchJSONTerminalValue.
            </summary>
            <param name="this">This <see cref="T:CK.Text.StringMatcher"/>.</param>
            <param name="value">The parsed value. Can be null.</param>
            <returns>True if a JSON value has been matched, false otherwise.</returns>
        </member>
        <member name="M:CK.Text.StringMatcherTextExtension.TryMatchJSONTerminalValue(CK.Text.StringMatcher,System.Object@)">
            <summary>
            Matches a JSON terminal value: a "string", null, a number (double value), true or false.
            No error is set if match fails.
            </summary>
            <param name="this">This <see cref="T:CK.Text.StringMatcher"/>.</param>
            <param name="value">The parsed value. Can be null.</param>
            <returns>True if a JSON value has been matched, false otherwise.</returns>
        </member>
        <member name="M:CK.Text.StringMatcherTextExtension.MatchJSONObjectContent(CK.Text.StringMatcher,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Object}}@)">
            <summary>
            Matches a very simple version of a JSON object content: this match stops at the first closing }.
            Whitespaces and JS comments (//... or /* ... */) are skipped.
            </summary>
            <param name="this">This <see cref="T:CK.Text.StringMatcher"/>.</param>
            <param name="o">The read object on success as a list of KeyValuePair.</param>
            <returns>True on success, false on error.</returns>
        </member>
        <member name="M:CK.Text.StringMatcherTextExtension.MatchJSONObject(CK.Text.StringMatcher,System.Object@)">
            <summary>
            Matches a { "JSON" : "object" }, a ["JSON", "array"] or a terminal value (string, null, double, true or false) 
            and any combination of them.
            Whitespaces and JS comments (//... or /* ... */) are skipped.
            </summary>
            <param name="this">This <see cref="T:CK.Text.StringMatcher"/>.</param>
            <param name="value">
            A list of objects (for array), a list of KeyValuePair&lt;string,object&gt; for object or
            a double, string, boolean or null (for null).</param>
            <returns>True on success, false on error.</returns>
        </member>
        <member name="M:CK.Text.StringMatcherTextExtension.MatchJSONArrayContent(CK.Text.StringMatcher,System.Collections.Generic.List{System.Object}@)">
            <summary>
            Matches a JSON array content: the match ends with the first ].
            Whitespaces and JS comments (//... or /* ... */) are skipped.
            </summary>
            <param name="this">This <see cref="T:CK.Text.StringMatcher"/>.</param>
            <param name="value">The list of objects on success.</param>
            <returns>True on success, false otherwise.</returns>
        </member>
    </members>
</doc>
